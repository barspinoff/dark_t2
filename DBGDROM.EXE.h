/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'DBGDROM.EXE'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _GUID;
struct HWND__;
struct HINSTANCE__;
struct tagWNDCLASSA;
struct HICON__;
struct HBRUSH__;
struct _iobuf;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct tagLOGPALETTE;
struct HDC__;
struct tagRGBQUAD;
struct HTASK__;
struct HMMIO__;
struct $BA519187DB4FB038EDB1959BB4D2DF27;
struct tagBITMAPINFO;

/* 1 */
typedef struct _GUID GUID;

/* 2 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 3 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 4 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 60 */
typedef void *PVOID;

/* 10 */
typedef unsigned int DWORD;

/* 5 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 6 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 7 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 8 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 12 */
typedef unsigned int ULONG_PTR;

/* 11 */
typedef ULONG_PTR SIZE_T;

/* 9 */
struct _MEMORYSTATUS
{
  DWORD dwLength;
  DWORD dwMemoryLoad;
  SIZE_T dwTotalPhys;
  SIZE_T dwAvailPhys;
  SIZE_T dwTotalPageFile;
  SIZE_T dwAvailPageFile;
  SIZE_T dwTotalVirtual;
  SIZE_T dwAvailVirtual;
};

/* 14 */
typedef unsigned int _dev_t;

/* 15 */
typedef unsigned __int16 _ino_t;

/* 16 */
typedef int _off_t;

/* 17 */
typedef int __time32_t;

/* 13 */
#pragma pack(push, 8)
struct _stat32
{
  _dev_t st_dev;
  _ino_t st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  _dev_t st_rdev;
  _off_t st_size;
  __time32_t st_atime;
  __time32_t st_mtime;
  __time32_t st_ctime;
};
#pragma pack(pop)

/* 19 */
typedef int LONG;

/* 18 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 21 */
typedef struct HWND__ *HWND;

/* 23 */
typedef struct HINSTANCE__ *HINSTANCE;

/* 26 */
typedef char CHAR;

/* 25 */
typedef const CHAR *LPCSTR;

/* 27 */
typedef CHAR *LPSTR;

/* 28 */
typedef unsigned __int16 WORD;

/* 30 */
typedef int LONG_PTR;

/* 29 */
typedef LONG_PTR LPARAM;

/* 34 */
typedef unsigned int UINT_PTR;

/* 32 */
typedef unsigned int UINT;

/* 33 */
typedef UINT_PTR WPARAM;

/* 31 */
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

/* 20 */
#pragma pack(push, 1)
struct tagOFNA
{
  DWORD lStructSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCSTR lpstrFilter;
  LPSTR lpstrCustomFilter;
  DWORD nMaxCustFilter;
  DWORD nFilterIndex;
  LPSTR lpstrFile;
  DWORD nMaxFile;
  LPSTR lpstrFileTitle;
  DWORD nMaxFileTitle;
  LPCSTR lpstrInitialDir;
  LPCSTR lpstrTitle;
  DWORD Flags;
  WORD nFileOffset;
  WORD nFileExtension;
  LPCSTR lpstrDefExt;
  LPARAM lCustData;
  LPOFNHOOKPROC lpfnHook;
  LPCSTR lpTemplateName;
  void *pvReserved;
  DWORD dwReserved;
  DWORD FlagsEx;
};
#pragma pack(pop)

/* 22 */
struct HWND__
{
  int unused;
};

/* 24 */
struct HINSTANCE__
{
  int unused;
};

/* 35 */
typedef struct tagWNDCLASSA WNDCLASSA;

/* 38 */
typedef LONG_PTR LRESULT;

/* 37 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 39 */
typedef struct HICON__ *HICON;

/* 41 */
typedef HICON HCURSOR;

/* 42 */
typedef struct HBRUSH__ *HBRUSH;

/* 36 */
struct tagWNDCLASSA
{
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
};

/* 40 */
struct HICON__
{
  int unused;
};

/* 43 */
struct HBRUSH__
{
  int unused;
};

/* 44 */
typedef struct _iobuf FILE;

/* 45 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 46 */
#pragma pack(push, 8)
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
#pragma pack(pop)

/* 48 */
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 52 */
typedef void *HANDLE;

/* 47 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 51 */
struct _LIST_ENTRY
{
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
};

/* 50 */
typedef struct _LIST_ENTRY LIST_ENTRY;

/* 49 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 55 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 54 */
typedef struct _FILETIME FILETIME;

/* 53 */
struct _WIN32_FIND_DATAA
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  CHAR cFileName[260];
  CHAR cAlternateFileName[14];
};

/* 58 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 57 */
typedef struct tagPOINT POINT;

/* 56 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 59 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 63 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 62 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
  DWORD dwOemId;
  struct
  {
    WORD wProcessorArchitecture;
    WORD wReserved;
  };
};

/* 64 */
typedef void *LPVOID;

/* 65 */
typedef ULONG_PTR DWORD_PTR;

/* 61 */
struct _SYSTEM_INFO
{
  union
  {
    DWORD dwOemId;
    struct
    {
      WORD wProcessorArchitecture;
      WORD wReserved;
    };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 66 */
typedef struct tagLOGPALETTE LOGPALETTE;

/* 70 */
typedef unsigned __int8 BYTE;

/* 69 */
struct tagPALETTEENTRY
{
  BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
};

/* 68 */
typedef struct tagPALETTEENTRY PALETTEENTRY;

/* 67 */
struct tagLOGPALETTE
{
  WORD palVersion;
  WORD palNumEntries;
  PALETTEENTRY palPalEntry[1];
};

/* 72 */
typedef struct HDC__ *HDC;

/* 74 */
typedef int BOOL;

/* 75 */
typedef struct tagRECT RECT;

/* 71 */
struct tagPAINTSTRUCT
{
  HDC hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
};

/* 73 */
struct HDC__
{
  int unused;
};

/* 76 */
typedef struct tagRGBQUAD RGBQUAD;

/* 77 */
struct tagRGBQUAD
{
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
};

/* 78 */
#pragma pack(push, 1)
struct timecaps_tag
{
  UINT wPeriodMin;
  UINT wPeriodMax;
};
#pragma pack(pop)

/* 80 */
typedef DWORD FOURCC;

/* 82 */
typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

/* 81 */
typedef MMIOPROC *LPMMIOPROC;

/* 83 */
typedef struct HTASK__ *HTASK;

/* 85 */
typedef char *HPSTR;

/* 86 */
typedef struct HMMIO__ *HMMIO;

/* 79 */
#pragma pack(push, 1)
struct _MMIOINFO
{
  DWORD dwFlags;
  FOURCC fccIOProc;
  LPMMIOPROC pIOProc;
  UINT wErrorRet;
  HTASK htask;
  LONG cchBuffer;
  HPSTR pchBuffer;
  HPSTR pchNext;
  HPSTR pchEndRead;
  HPSTR pchEndWrite;
  LONG lBufOffset;
  LONG lDiskOffset;
  DWORD adwInfo[3];
  DWORD dwReserved1;
  DWORD dwReserved2;
  HMMIO hmmio;
};
#pragma pack(pop)

/* 84 */
struct HTASK__
{
  int unused;
};

/* 87 */
#pragma pack(push, 1)
struct HMMIO__
{
  int unused;
};
#pragma pack(pop)

/* 88 */
#pragma pack(push, 1)
struct _MMCKINFO
{
  FOURCC ckid;
  DWORD cksize;
  FOURCC fccType;
  DWORD dwDataOffset;
  DWORD dwFlags;
};
#pragma pack(pop)

/* 89 */
struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
};

/* 90 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 93 */
typedef unsigned __int16 wchar_t;

/* 92 */
typedef wchar_t WCHAR;

/* 94 */
typedef struct _SYSTEMTIME SYSTEMTIME;

/* 91 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 96 */
typedef BYTE *LPBYTE;

/* 95 */
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 97 */
typedef struct $BA519187DB4FB038EDB1959BB4D2DF27 _CRT_DOUBLE;

/* 98 */
#pragma pack(push, 8)
struct $BA519187DB4FB038EDB1959BB4D2DF27
{
  double x;
};
#pragma pack(pop)

/* 99 */
#pragma pack(push, 8)
struct _exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
};
#pragma pack(pop)

/* 100 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 101 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 102 */
struct _OSVERSIONINFOA
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
};

/* 103 */
struct _PROCESS_INFORMATION
{
  HANDLE hProcess;
  HANDLE hThread;
  DWORD dwProcessId;
  DWORD dwThreadId;
};

/* 104 */
#pragma pack(push, 1)
struct tagJOYCAPSA
{
  WORD wMid;
  WORD wPid;
  CHAR szPname[32];
  UINT wXmin;
  UINT wXmax;
  UINT wYmin;
  UINT wYmax;
  UINT wZmin;
  UINT wZmax;
  UINT wNumButtons;
  UINT wPeriodMin;
  UINT wPeriodMax;
  UINT wRmin;
  UINT wRmax;
  UINT wUmin;
  UINT wUmax;
  UINT wVmin;
  UINT wVmax;
  UINT wCaps;
  UINT wMaxAxes;
  UINT wNumAxes;
  UINT wMaxButtons;
  CHAR szRegKey[32];
  CHAR szOEMVxD[260];
};
#pragma pack(pop)

/* 109 */
union _KEY_EVENT_RECORD::$0E79EC4DAC98A4AB202537FA8C3F69FC
{
  WCHAR UnicodeChar;
  CHAR AsciiChar;
};

/* 108 */
struct _KEY_EVENT_RECORD
{
  BOOL bKeyDown;
  WORD wRepeatCount;
  WORD wVirtualKeyCode;
  WORD wVirtualScanCode;
  union _KEY_EVENT_RECORD::$0E79EC4DAC98A4AB202537FA8C3F69FC uChar;
  DWORD dwControlKeyState;
};

/* 107 */
typedef struct _KEY_EVENT_RECORD KEY_EVENT_RECORD;

/* 114 */
typedef __int16 SHORT;

/* 113 */
struct _COORD
{
  SHORT X;
  SHORT Y;
};

/* 112 */
typedef struct _COORD COORD;

/* 111 */
struct _MOUSE_EVENT_RECORD
{
  COORD dwMousePosition;
  DWORD dwButtonState;
  DWORD dwControlKeyState;
  DWORD dwEventFlags;
};

/* 110 */
typedef struct _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;

/* 116 */
struct _WINDOW_BUFFER_SIZE_RECORD
{
  COORD dwSize;
};

/* 115 */
typedef struct _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;

/* 118 */
struct _MENU_EVENT_RECORD
{
  UINT dwCommandId;
};

/* 117 */
typedef struct _MENU_EVENT_RECORD MENU_EVENT_RECORD;

/* 120 */
struct _FOCUS_EVENT_RECORD
{
  BOOL bSetFocus;
};

/* 119 */
typedef struct _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;

/* 106 */
union _INPUT_RECORD::$56C9F45CD5AB058B1B4FD5A9AB9216C4
{
  KEY_EVENT_RECORD KeyEvent;
  MOUSE_EVENT_RECORD MouseEvent;
  WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  MENU_EVENT_RECORD MenuEvent;
  FOCUS_EVENT_RECORD FocusEvent;
};

/* 105 */
struct _INPUT_RECORD
{
  WORD EventType;
  union _INPUT_RECORD::$56C9F45CD5AB058B1B4FD5A9AB9216C4 Event;
};

/* 121 */
typedef struct tagBITMAPINFO BITMAPINFO;

/* 124 */
struct tagBITMAPINFOHEADER
{
  DWORD biSize;
  LONG biWidth;
  LONG biHeight;
  WORD biPlanes;
  WORD biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG biXPelsPerMeter;
  LONG biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
};

/* 123 */
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;

/* 122 */
struct tagBITMAPINFO
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors[1];
};

/* 125 */
struct cMultiPool;

/* 126 */
struct cStdAlloc;

/* 127 */
struct cMemAllocTimer;

/* 128 */
struct cHeapBlock;

/* 129 */
struct cHeap;

/* 130 */
struct cPoolAllocator;

